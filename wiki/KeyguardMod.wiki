#summary Base UI and master process framework for all other objects

= Introduction =

The useful thing of the keyguard is really in the regulation of it going back to sleep again faster when you haven't interacted with the device, giving you a slightly longer timeout if you have touched something and even longer if you have opened the slide. Give the user different ways to wake up the screen so that it can't accidentally be done, such as require double lock button press, or a press followed by a shake. I can see even using one of the touch buttons such as home in a long press to facilitate wakeup. Keyguard effectively morphs into a screenguard of sorts.

= Details =

the app just isn't feasible for lock pattern setup at all. it requires the user desire to be presented immediately with the previewing functionality of our app! so all we need to worry about is blocking the default keyguard case by case (or running the disable), then managing invoking our activity that will only be seen when called, but still uses a service or receiver to collect data for the preview panel at all times.

= Lockbuddy = 
Simple control panel addon object letting the user choose other unlock/relock methods and certain auto-unlock actions or auto-relock restriction conditions.

= Introduction =

One of the main additional conveniences MyLock is aiming for is giving users the ability to unlock/relock it in other quicker methods besides the default in android. Examples: Double-press of lock button, Press lock button then shake, unlock automatically when slide is opened (current behavior is that it only wakes up the sleeping screen), or camera button full press. 

= Details =

The implementation of this will live inside the base process of the app that will be running at all times to catch the input we are going to use to invoke or bypass the keyguard. A nice idea for lockbuddy would be to prevent the keyguard from kicking in when the screen goes to auto-sleep while the keypad is open. give a longer timeout when idle if keypad is open, such that the screen will sleep after some time (longer than the normal keypad closed timeframe) and a longer time before keyguard shows

==  Backlightwiz ==
Simple control panel addon object enabling great control over screen brightness and backlight timers

= Details =

when you have it on lowest brightness, it kind of auto-dims even dimmer a bit before the autolock kicks in. users will be able to make the autolock vs autodim work for them and respect whether the keypad is open, and other factors. also invoke a brightness toggle using buttons/shortcut mode, for this i am imagining a 3 stage control similar to the power control widget, however it will be fine tuned to a literal backlight OFF/20%/80%. that function will work directly with settings from shortcutter.

another option within this object will allow a user to specify a shorter backlight timeout when the lockscreen is only being viewed (this can be part of lockbuddy now, the 2.0.1 default is that the lockscreen hides after 5 seconds regardless of your timeout preference


==Some Code Stuff==

The current default keys that get suppressed from waking up the screen are defined in KeyguardViewMediator.java -- redefining these to allow more control over the backlight and further allow it to re-sleep faster when keyguard is being shown could be part of this addon. 
{{{
    private boolean isWakeKeyWhenKeyguardShowing(int keyCode) {
        switch (keyCode) {
            case KeyEvent.KEYCODE_VOLUME_UP:
            case KeyEvent.KEYCODE_VOLUME_DOWN:
            case KeyEvent.KEYCODE_MUTE:
            case KeyEvent.KEYCODE_HEADSETHOOK: 
            case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE: 
            case KeyEvent.KEYCODE_MEDIA_STOP: 
            case KeyEvent.KEYCODE_MEDIA_NEXT: 
            case KeyEvent.KEYCODE_MEDIA_PREVIOUS: 
            case KeyEvent.KEYCODE_MEDIA_REWIND: 
            case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
            case KeyEvent.KEYCODE_CAMERA:
                return false;
        }
        return true;
    }
}}}