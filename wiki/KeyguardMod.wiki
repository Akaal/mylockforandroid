#summary Base UI and master process framework for all other objects

= Introduction =

To accomplish the starting point for this project, we need to learn how to instate our own custom keyguard environment. The foundation for the rest of the components of this project is the modified keyguard on which we can place addon objects such as the notificationpreview

= Details =

I am researching how much we need to interact with what's called the keyguard manager in order to accomplish the input on the lockscreen. http://developer.android.com/reference/android/app/KeyguardManager.html

Based on the way the documentation talks about "showing the keyguard" it seems like this means the lock screen itself (not the more abstract state of having functions locked) is the keyguard. So this allows us to infer that we can reprogram the lockscreen environment to accomplish our goal, and not worry about a specific state of lockdown. When keyguard is invoked it seems to be simultaneously "showing the keyguard" and turning off the backlight & display.

See other app examples such as Lock 2.0, which allows a user to open the notification panel while the keyguard is being shown.

the app just isn't feasible for lock pattern setup at all. it requires the user desire to be presented immediately with the previewing functionality of our app! so all we need to worry about is blocking the default keyguard case by case (or running the disable), then managing invoking our activity that will only be seen when called, but still uses a service or receiver to collect data for the preview panel at all times.

==Code info==

The Handler information in KeyguardViewMediator.java states that when you want to call something on the keyguard you should pass it through the handler. This tells me that our action of hiding the keyguard could be done using this handler case HIDE.

It's not clear to me yet whether we can just call a disable the same way the phone app does or if we have to have a service or some kind of receiver which watches for the circumstances that by default show the keyguard. regardless we still need to define all the cases when we want the keyguard to happen. 

There is a totally separate of 2 files for use when the user is choosing to have a lockpattern. Lockpatternview and lockpatternviewproperties. The normal versions of these appear to be keyguardviewbase and keyguardviewproperties.
